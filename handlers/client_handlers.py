"""–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—ã"""
from aiogram import types, Dispatcher
from keyboards import client_keyboards
from aiogram.dispatcher.filters import Text
from data import sqlite_db
from loader import bot, dp
from data.config import admins
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

#–ö–æ–º–º–∞–Ω–¥–∞ /start
async def commands_start(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥ start –∏ help"""
    #  –æ—Ç–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start –∏–ª–∏ /help
    await message.answer('\n–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç "–ë–∞—Ä–∞—Ö–æ–ª–∫–∞ USA"'
                         '\n–í –Ω–∞—à–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—â–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 5 —Ç–æ–≤–∞—Ä–æ–≤ —Å  –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞'
                         '\n–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏—Ç—å –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è'
                         ''
                         '', reply_markup=client_keyboards.kb_client)
#    else:
#        await message.reply('okey')
    result = await sqlite_db.sql_loads_ban(message.from_user.id)
    if message.from_user.id == 145539070:
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–¥–º–∏–Ω-–ü–∞–Ω–µ–ª—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ')
        test = await sqlite_db.testuserid(message.from_user.id)
        print(test)
    else:
        if result is None:
            await sqlite_db.sql_set_unban(message.from_user.id)
            entry = await sqlite_db.sql_check_block(message.from_user.id)
            if entry is None:
                await message.answer('–ü—Ä–∏–≤–µ—Ç, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!')
            elif entry == 1:
                await message.answer('–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!')
            else:
                await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –¥–æ—Å–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π!'
                                     '\n'
                                     '\n'
                                     '–ü—Ä–∞–≤–∏–ª–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–æ—Å–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –º–æ–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –ø–µ—Ä–µ–π–¥—è –≤ —Ä–∞–∑–¥–µ–ª "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"'
                                     '\n'
                                     '\n'
                                     '–ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—é –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"'
                                     '\n'
                                     '\n'
                                     '–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', reply_markup=client_keyboards.kb_clientinfo)

#async def load_address(message: types.Message):
#    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –ø–µ–∫–∞—Ä–Ω–∏"""
#    await message.reply(address[0])
#    await message.answer_location(float(address[1]), float(address[2]))


#async def load_contacts(message: types.Message):
#    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–µ–∫–∞—Ä–Ω–∏"""
#    for name, phone in zip(names, phones):
#        await message.answer_contact(phone_number=phone, first_name=name)
#    await message.answer(email)

#–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def show_products(message: types.Message):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '–ø—Ä–æ–¥—É–∫—Ü–∏—è' –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏"""
    await message.reply('–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –±–æ—Ç –≤–∞—Å –ø–æ–ø—Ä–æ—Å–∏—Ç: –ü—Ä–∏–ª–æ–∂–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, –û–ø–∏—Å–∞–Ω–∏–µ, –í—ã–±—Ä–∞—Ç—å —à—Ç–∞—Ç, –£–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥, –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ü–µ–Ω—É.'
                        '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=client_keyboards.kb_category_for_show)
#–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
async def show_instrukcii(message: types.Message):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '–ø—Ä–æ–¥—É–∫—Ü–∏—è' –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏"""
    await message.reply('–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ, –µ—Å–ª–∏ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∏–∂–µ:'
                        '\n'
                        '1) –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É: –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'
                        '\n'
                        '2) –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏—é'
                        '\n'
                        '3) –í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ–∫–Ω–æ —á–∞—Ç–∞'
                        '\n'
                        '4) –í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ'
                        '\n'
                        '5) –í–≤–µ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ'
                        '\n'
                        '6) –í—ã–±—Ä–∞—Ç—å –®–¢–ê–¢ –∏–∑ —Å–ø–∏—Å–∫–∞'
                        '\n'
                        '7) –í–ø–∏—Å–∞—Ç—å –≥–æ—Ä–æ–¥'
                        '\n'
                        '8) –£–∫–∞–∑–∞—Ç—å –ª—é–±—ã–µ —É–¥–æ–±–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
                        '\n'
                        '9) –£–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É'
                        '\n'
                        '–ù–∞ —ç—Ç–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–æ–Ω—á–µ–Ω–æ, —Å–≤–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"',  parse_mode=types.ParseMode.HTML, reply_markup=client_keyboards.kb_client)

#–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞
async def show_pravila(message: types.Message):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '–ø—Ä–æ–¥—É–∫—Ü–∏—è' –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏"""
    await message.reply('–î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Å–∏–º –í–∞—Å –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–∞–≤–∏–ª:'
                        '\n'                      
                        '–£–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤—è–∑–∏'
                        '\n'
                        '–ù–µ –≤—ã–∫–ª–∞–¥—ã–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ'
                        '\n'
                        '–ü–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏ –∏–ª–∏ –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª—è—Ç—å'
                        '\n',  parse_mode=types.ParseMode.HTML, reply_markup=client_keyboards.kb_client)

#–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É
async def show_support(message: types.Message):
   #–°–∞–ø–ø–æ—Ä—Ç
    await message.reply('–ù–∞—Å—Ç–æ—è—â–µ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è –æ–±–ª–µ–≥—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏–π –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏ —á–µ–≥–æ –ª–∏–±–æ.'
                        '\n<b>–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è:</b> <i>1.4 –æ—Ç 06.19.2022</i>'
                        '\n'
                        '\n–ï—Å–ª–∏ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–æ–µ–∫—Ç–∞:'
                        '\n'
                        '<code>–¢bc1qk45fpxn5z5vaxtgtj6cjltm2xhsvjftd2vck07</code>'
                        '\n'
                        '\n<i>–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –Ω–∞–ø–∏—Å–∞—Ç—å –∏—Ö –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</i>'
                        '\n'
                        '\n@RaDSupport_bot'
                        '\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —á–∏—Ç–∞–µ—Ç–µ —ç—Ç–æ üòä',  parse_mode=types.ParseMode.HTML, reply_markup=client_keyboards.kb_clientinfo)

#–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ê–≤—Ç–æ–º–æ–±–∏–ª–∏
async def show_productsauto(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, text='–í—ã–±–∏—Ä–∏—Ç–µ —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=client_keyboards.kb_autocategory_for_show)

#–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ê–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π
async def show_productsautoparts(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, text='–í—ã–±–∏—Ä–∏—Ç–µ —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=client_keyboards.kb_autoparts_for_show)

#–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞–±–æ—Ç—ã
async def show_productswork(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, text='–í—ã–±–∏—Ä–∏—Ç–µ —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=client_keyboards.kb_workscategory_for_show)

#–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞
async def show_productshome(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, text='–í—ã–±–∏—Ä–∏—Ç–µ —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=client_keyboards.kb_homecategory_for_show)

#–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–º–∞
async def show_productsbuildings(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, text='–í—ã–±–∏—Ä–∏—Ç–µ —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=client_keyboards.kb_buildingcategory_for_show)

#–ö–∞—Ç–µ–≥–æ—Ä–∏—è –µ–¥–∞
async def show_productseda(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, text='–í—ã–±–∏—Ä–∏—Ç–µ —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=client_keyboards.kb_edacategory_for_show)

#–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥—Ä—É–≥–æ–µ
async def show_productsothers(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, text='–í—ã–±–∏—Ä–∏—Ç–µ —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ—á–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤', reply_markup=client_keyboards.kb_otherscategory_for_show)

#–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def show_all_products_from_category(callback_query: types.CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = callback_query.data.replace('show ', '')
    read = await sqlite_db.sql_loads_all_products_from_category(category)

    if len(read) >= 1:
        for ret in read:
            await bot.send_photo(callback_query.from_user.id, ret[0], f'.{ret[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {ret[2]}\n–†–µ–≥–∏–æ–Ω: {ret[3]}\n–ì–æ—Ä–æ–¥: {ret[4]}\n–ö–æ–Ω—Ç–∞–∫—Ç—ã: {ret[5]}\n–¶–µ–Ω–∞: {ret[6]}')
            print(ret[7])
            userid = callback_query.from_user.id
            if userid == int(ret[7]) or str(callback_query.from_user.id) in admins:
                await bot.send_message(callback_query.from_user.id, text='–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(f'–£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: "{ret[1]}" ?', callback_data=f'del_product {category}${ret[10]}${ret[7]}')))
    else:
        await bot.send_message(callback_query.from_user.id, text='–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—â—ë –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤!')
        #, reply_markup=client_keyboards.kb_category_for_show

#–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
async def show_user_products_from_category(message: types.Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""

    userid = message.from_user.id
    bases = ["Audi", "Buick", "BMW", "Cadillac", "Chevrolet", "Chrysler", "Dodge", "Ford", "GMC", "Honda", "Hyundai",
             "Infinity", "Jaguar", "Jeep", "Lexus", "Lincoln", "Mercedes", "Mercury", "Mitsubishi", "Nissan",
             "Plymouth", "Tesla", "Toyota", "Others", "Audiparts", "Buickparts", "BMWparts", "Cadillacparts",
             "Chevroletparts", "Chryslerparts", "Dodgeparts", "Fordparts", "GMCparts", "Hondaparts", "Hyundaiparts",
             "Infinityparts", "Jaguarparts", "Jeepparts", "Lexusparts", "Lincolnparts", "Mercedesparts", "Mercuryparts",
             "Mitsubishiparts", "parts", "Plymouthparts", "Teslaparts", "Toyotaparts", "Othersparts", "eda", "opteda",
             "viezdpovara", "construction", "arenda", "commerc", "bitovaya", "interior", "posuda", "handymanwork",
             "driverwork", "runnerwork", "itwork", "others"]

    for x in bases:
        read = await sqlite_db.sql_loads_users_products_from_category(x, message.from_user.id)
        for ret in read:
            if len(ret) >= 1 and userid == int(ret[7]):
                await bot.send_photo(message.from_user.id, ret[0], f'{ret[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {ret[2]}\n–†–µ–≥–∏–æ–Ω: {ret[3]}\n–ì–æ—Ä–æ–¥: {ret[4]}\n–ö–æ–Ω—Ç–∞–∫—Ç—ã: {ret[5]}\n–¶–µ–Ω–∞ {ret[6]}')
                userid = message.from_user.id
                if userid == int(ret[7]):
                    await bot.send_message(message.from_user.id, text='–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(f'–£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: "{ret[1]}" ?', callback_data=f'del_product {x}${ret[10]}${ret[7]}')))
#            if len(ret) > 1:
#                await bot.send_message(message.from_user.id, text='–í—ã –µ—â—ë –Ω–µ –≤—ã–∫–ª–∞–¥—ã–≤–∞–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤')
#                print(read)


#–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def delete_product_from_database(callback_query: types.CallbackQuery):
    """–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–∏—Ç—å, –∏ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –ë–î"""
    data = callback_query.data.replace('del_product ', '')

    await sqlite_db.sql_delete_product(data)
    await bot.send_message(callback_query.from_user.id, text="–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω")

#–û—Ç—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
def register_handlers_client(dp: Dispatcher):
    """
        –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ main.py
    """
    dp.register_message_handler(commands_start, commands=['start', 'help'])
    dp.register_message_handler(show_products, Text(startswith='–ö–∞—Ç–∞–ª–æ–≥'))
    dp.register_message_handler(show_support, Text(startswith='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'))
    dp.register_message_handler(show_pravila, Text(startswith='–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è'))
    dp.register_message_handler(show_instrukcii, Text(startswith='–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏'))
    dp.register_message_handler(show_user_products_from_category, Text('–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è'))
    dp.register_callback_query_handler(show_productsauto, lambda x: x.data == 'automobilipomarkam')
    dp.register_callback_query_handler(show_productsautoparts, lambda x: x.data == 'autopartspogruppam')
    dp.register_callback_query_handler(show_productseda, lambda x: x.data == 'edapogruppam')
    dp.register_callback_query_handler(show_productshome, lambda x: x.data == 'homepogruppam')
    dp.register_callback_query_handler(show_productsbuildings, lambda x: x.data == 'buildingspogruppam')
    dp.register_callback_query_handler(show_productswork, lambda x: x.data == 'workpogruppam')
    dp.register_callback_query_handler(show_productsothers, lambda x: x.data == 'otherspogruppam')
    dp.register_callback_query_handler(show_all_products_from_category, lambda x: x.data.startswith('show'))
    dp.register_callback_query_handler(delete_product_from_database,
                                       lambda x: x.data.startswith('del_product'))